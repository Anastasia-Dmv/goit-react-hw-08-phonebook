{"ast":null,"code":"import axios from \"axios\";\nimport authActions from \"./authActions\";\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  }\n\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n  console.log(credentials);\n\n  try {\n    const response = await axios.post(\"users/signup\", credentials);\n    console.log(\"response\", response); //token.set(response.data.token);\n\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst login = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post(\"users/login\", credentials);\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logout = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post(\"/users/logout\");\n    token.unset();\n    dispatch(authActions.logoutRequest.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: {\n      token: persistedToken\n    }\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get(\"/users/current\");\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};","map":{"version":3,"sources":["/Users/anastasia/Documents/React-BC-22/goit-react-hw-08-phonebook/src/redux/auth/authOperations.js"],"names":["axios","authActions","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","console","log","response","post","registerSuccess","data","error","registerError","message","login","loginRequest","loginSuccess","loginError","logout","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","auth","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport authActions from \"./authActions\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  },\n};\n\nconst register = (credentials) => async (dispatch) => {\n  dispatch(authActions.registerRequest());\n  console.log(credentials);\n  try {\n    const response = await axios.post(\"users/signup\", credentials);\n\n    console.log(\"response\", response);\n    //token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst login = (credentials) => async (dispatch) => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post(\"users/login\", credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logout = () => async (dispatch) => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post(\"/users/logout\");\n\n    token.unset();\n    dispatch(authActions.logoutRequest.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n  if (!persistedToken) {\n    return;\n  }\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n  try {\n    const response = await axios.get(\"/users/current\");\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\nexport default { register, login, logout, getCurrentUser };\n"]},"metadata":{},"sourceType":"module"}