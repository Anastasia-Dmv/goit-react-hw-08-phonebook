{"ast":null,"code":"import _objectSpread from\"/Users/anastasia/Documents/React-BC-22/goit-react-hw-08-phonebook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import contactsActions from\"./contact-actions\";import axios from\"axios\";import{token}from\"../auth/authOperations\";axios.defaults.baseURL=\"https://goit-phonebook-api.herokuapp.com\";var addContact=function addContact(name,number){return function(dispatch){dispatch(contactsActions.addContactRequest());//fetch(\"http://localhost:2000/contacts\");\n// console.log(\"contact\", contact);\naxios.post(\"/contacts\",{name:name,number:number}).then(function(response){console.log(\"resrtduytfuy\",response.data);dispatch(contactsActions.addContactSuccess({name:name,number:number,id:response.data.name}));}).catch(function(error){return dispatch(contactsActions.addContactError(error));});};};var fetchContacts=function fetchContacts(){return function(dispatch,getState){dispatch(contactsActions.fetchContactsRequest());var _getState=getState(),persistedToken=_getState.auth.token;token.set(persistedToken);axios.get(\"/contacts\").then(function(_ref){var data=_ref.data;console.log(\"data\",data);var keys=Object.keys(data);var newData=keys.reduce(function(acc,key){acc.push(_objectSpread({id:key},data[key]));return acc;},[]);console.log(\"newData\",newData);dispatch(contactsActions.fetchContactsSuccess(newData));})// })\n.catch(function(error){return dispatch(contactsActions.fetchContactsError(error));});};};var removeContact=function removeContact(id){return function(dispatch){dispatch(contactsActions.removeContactRequest());axios.delete(\"contacts/\".concat(id)).then(function(){return dispatch(contactsActions.removeContactSuccess(id));}).catch(function(error){return dispatch(contactsActions.removeContactError(error));});};};export default{addContact:addContact,fetchContacts:fetchContacts,removeContact:removeContact};","map":{"version":3,"sources":["/Users/anastasia/Documents/React-BC-22/goit-react-hw-08-phonebook/src/redux/contact/contactsOperation.js"],"names":["contactsActions","axios","token","defaults","baseURL","addContact","name","number","dispatch","addContactRequest","post","then","response","console","log","data","addContactSuccess","id","catch","error","addContactError","fetchContacts","getState","fetchContactsRequest","persistedToken","auth","set","get","keys","Object","newData","reduce","acc","key","push","fetchContactsSuccess","fetchContactsError","removeContact","removeContactRequest","delete","removeContactSuccess","removeContactError"],"mappings":"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","sourcesContent":["import contactsActions from \"./contact-actions\";\nimport axios from \"axios\";\nimport { token } from \"../auth/authOperations\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\nconst addContact = (name, number) => (dispatch) => {\n  dispatch(contactsActions.addContactRequest());\n  //fetch(\"http://localhost:2000/contacts\");\n  // console.log(\"contact\", contact);\n\n  axios\n    .post(\"/contacts\", { name, number })\n    .then((response) => {\n      console.log(\"resrtduytfuy\", response.data);\n      dispatch(\n        contactsActions.addContactSuccess({\n          name,\n          number,\n          id: response.data.name,\n        })\n      );\n    })\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\n};\n\nconst fetchContacts = () => (dispatch, getState) => {\n  dispatch(contactsActions.fetchContactsRequest());\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n  token.set(persistedToken);\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => {\n      console.log(\"data\", data);\n\n      const keys = Object.keys(data);\n      const newData = keys.reduce((acc, key) => {\n        acc.push({ id: key, ...data[key] });\n        return acc;\n      }, []);\n      console.log(\"newData\", newData);\n      dispatch(contactsActions.fetchContactsSuccess(newData));\n    })\n    // })\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(contactsActions.removeContactRequest());\n  axios\n    .delete(`contacts/${id}`)\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\n    .catch((error) => dispatch(contactsActions.removeContactError(error)));\n};\nexport default {\n  addContact,\n  fetchContacts,\n  removeContact,\n};\n"]},"metadata":{},"sourceType":"module"}